openapi: 3.0.3

info:
  title: CoCart - Cart API v1
  version: 4.6.0
  description: API for managing shopping carts
  termsOfService: http://cocartapi.com/terms-of-conditions-polar/
  contact:
    email: support@cocartapi.com
  license:
    name: GNU General Public License v3.0
    url: http://www.gnu.org/licenses/gpl-3.0.html

externalDocs:
  description: Find out more about CoCart API
  url: https://docs.cocartapi.com

servers:
  - url: "{protocol}://{host}/wp-json/cocart/v1"
    description: API v1
    variables:
      protocol:
        enum: [http, https]
        default: https
      host:
        default: example-store.com
        description: Your store domain

tags:
  - name: cart
    description: Operations for managing the shopping cart
  - name: items
    description: Operations for managing cart items
  - name: coupons
    description: Operations for managing cart coupons
  - name: fees
    description: Operations for managing cart fees
  - name: shipping
    description: Operations for managing shipping methods and rates
  - name: calculate
    description: Operations for calculating cart totals
  - name: products
    description: Operations for managing products

paths:
  /get-cart:
    get:
      tags:
        - cart
      summary: Get cart contents
      description: Gets the cart items added by the customer.
      parameters:
        - name: cart_key
          in: query
          description: Unique identifier for the cart/customer.
          schema:
            type: string
          required: false
        - name: thumb
          in: query
          description: Returns the URL of the product image thumbnail.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: List of cart items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
              example:
                "1c383cd30b7c298ab50293adfecb7b18":
                  key: "1c383cd30b7c298ab50293adfecb7b18"
                  product_id: 35
                  variation_id: 0
                  variation: []
                  quantity: 6
                  data_hash: "b5c1d5ca8bae6d4896cf1807cdf763f0"
                  line_tax_data:
                    subtotal: []
                    total: []
                  line_subtotal: 108
                  line_subtotal_tax: 0
                  line_total: 108
                  line_tax: 0
                  data: {}
                  product_name: "T-Shirt with Logo"
                  product_title: "T-Shirt with Logo"
                  product_price: "£18.00"
                "70efdf2ec9b086079795c442636b55fb":
                  key: "70efdf2ec9b086079795c442636b55fb"
                  product_id: 17
                  variation_id: 0
                  variation: []
                  quantity: 5
                  data_hash: "b5c1d5ca8bae6d4896cf1807cdf763f0"
                  line_tax_data:
                    subtotal: []
                    total: []
                  line_subtotal: 225
                  line_subtotal_tax: 0
                  line_total: 225
                  line_tax: 0
                  data: {}
                  product_name: "Hoodie with Logo"
                  product_title: "Hoodie with Logo"
                  product_price: "£45.00"

  /get-cart/{id}:
    get:
      tags:
        - cart
      summary: Get cart in session by cart key
      description: Gets the cart in session for the provided cart key.
      parameters:
        - name: id
          in: path
          description: Unique cart key for the session.
          required: true
          schema:
            type: string
        - name: thumb
          in: query
          description: Returns the URL of the product image thumbnail.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: Cart in session retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
              example:
                "1c383cd30b7c298ab50293adfecb7b18":
                  key: "1c383cd30b7c298ab50293adfecb7b18"
                  product_id: 35
                  variation_id: 0
                  variation: []
                  quantity: 6
                  data_hash: "b5c1d5ca8bae6d4896cf1807cdf763f0"
                  line_tax_data:
                    subtotal: []
                    total: []
                  line_subtotal: 108
                  line_subtotal_tax: 0
                  line_total: 108
                  line_tax: 0
                  data: {}
                  product_name: "T-Shirt with Logo"
                  product_title: "T-Shirt with Logo"
                  product_price: "£18.00"
                "70efdf2ec9b086079795c442636b55fb":
                  key: "70efdf2ec9b086079795c442636b55fb"
                  product_id: 17
                  variation_id: 0
                  variation: []
                  quantity: 5
                  data_hash: "b5c1d5ca8bae6d4896cf1807cdf763f0"
                  line_tax_data:
                    subtotal: []
                    total: []
                  line_subtotal: 225
                  line_subtotal_tax: 0
                  line_total: 225
                  line_tax: 0
                  data: {}
                  product_name: "Hoodie with Logo"
                  product_title: "Hoodie with Logo"
                  product_price: "£45.00"
        "404":
          description: Cart in session is not valid or not found.

  /get-cart/customer/{id}:
    get:
      tags:
        - cart
      summary: Get persistent cart by customer ID
      description: Gets the persistent cart for the provided customer ID.
      parameters:
        - name: id
          in: path
          description: Unique customer ID.
          required: true
          schema:
            type: string
        - name: thumb
          in: query
          description: Returns the URL of the product image thumbnail.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: Persistent cart retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
              example:
                "1c383cd30b7c298ab50293adfecb7b18":
                  key: "1c383cd30b7c298ab50293adfecb7b18"
                  product_id: 35
                  variation_id: 0
                  variation: []
                  quantity: 6
                  data_hash: "b5c1d5ca8bae6d4896cf1807cdf763f0"
                  line_tax_data:
                    subtotal: []
                    total: []
                  line_subtotal: 108
                  line_subtotal_tax: 0
                  line_total: 108
                  line_tax: 0
                  data: {}
                  product_name: "T-Shirt with Logo"
                  product_title: "T-Shirt with Logo"
                  product_price: "£18.00"
                "70efdf2ec9b086079795c442636b55fb":
                  key: "70efdf2ec9b086079795c442636b55fb"
                  product_id: 17
                  variation_id: 0
                  variation: []
                  quantity: 5
                  data_hash: "b5c1d5ca8bae6d4896cf1807cdf763f0"
                  line_tax_data:
                    subtotal: []
                    total: []
                  line_subtotal: 225
                  line_subtotal_tax: 0
                  line_total: 225
                  line_tax: 0
                  data: {}
                  product_name: "Hoodie with Logo"
                  product_title: "Hoodie with Logo"
                  product_price: "£45.00"
        "404":
          description: Customer ID is required or cart not found.

  /add-item:
    post:
      tags:
        - items
      summary: Add item to cart
      description: Adds a product item to the customer's cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  description: Unique identifier for the product.
                  type: string
                quantity:
                  description: The quantity amount of the item to add to cart.
                  type: string
                  default: "1"
                variation_id:
                  description: Unique identifier for the variation.
                  type: integer
                variation:
                  description: The variation attributes that identity the variation of the item.
                  type: object
                cart_item_data:
                  description: Additional item data passed to make item unique.
                  type: object
                return_cart:
                  description: Returns the cart once item is added.
                  type: boolean
                  default: false
              required:
                - quantity
      responses:
        "200":
          description: Item added to cart successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddItemResponse"
        "400":
          description: Bad request - invalid parameters or product not found.
        "404":
          description: Product not found.

  /calculate:
    post:
      tags:
        - calculate
      summary: Calculate cart totals
      description: Calculates the cart totals including taxes, shipping, and discounts.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                return:
                  description: Returns the cart totals once calculated.
                  type: boolean
                  default: false
      responses:
        "200":
          description: Cart totals calculated successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - type: string
                    description: Success message when return parameter is false or not provided.
                    example: Cart totals have been calculated.
                  - $ref: "#/components/schemas/CalculateResponse"
        "400":
          description: Bad request - invalid parameters.

  /count-items:
    get:
      tags:
        - items
      summary: Count cart items
      description: Returns the count of items in the customer's cart.
      responses:
        "200":
          description: Cart item count retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountItemsResponse"
        "400":
          description: Bad request - invalid parameters.

  /clear:
    post:
      tags:
        - cart
      summary: Clear cart
      description: Removes all items from the customer's cart.
      responses:
        "200":
          description: Cart cleared successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClearResponse"
        "406":
          description: Cart clearing failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: cocart_clear_cart_failed
                  message:
                    type: string
                    example: Clearing the cart failed!
                  data:
                    type: object
                    properties:
                      status:
                        type: integer
                        example: 406

  /item:
    get:
      tags:
        - items
      summary: Get cart item
      description: Retrieves a specific item from the customer's cart.
      parameters:
        - name: cart_item_key
          in: query
          description: Unique identifier for the item in the cart.
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Cart item retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
        "404":
          description: Cart item not found.

    post:
      tags:
        - items
      summary: Update cart item
      description: Updates the quantity of a specific item in the customer's cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_item_key:
                  description: Unique identifier for the item in the cart.
                  type: string
                quantity:
                  description: Quantity of this item to update to.
                  type: string
                return_cart:
                  description: Returns the whole cart to reduce API requests.
                  type: boolean
                  default: false
              required:
                - quantity
      responses:
        "200":
          description: Cart item updated successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CartItem"
                  - $ref: "#/components/schemas/Cart"
        "400":
          description: Bad request - invalid parameters.
        "404":
          description: Cart item not found.

    delete:
      tags:
        - items
      summary: Remove cart item
      description: Removes a specific item from the customer's cart.
      parameters:
        - name: cart_item_key
          in: query
          description: Unique identifier for the item in the cart.
          schema:
            type: string
          required: false
        - name: return_cart
          in: query
          description: Returns the whole cart to reduce API requests.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: Cart item removed successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      removed:
                        type: boolean
                        example: true
                  - $ref: "#/components/schemas/Cart"
        "404":
          description: Cart item not found.

  /logout:
    post:
      tags:
        - cart
      summary: Logout customer
      description: Logs out the customer and clears their session.
      responses:
        "200":
          description: Customer logged out successfully.
          content:
            application/json:
              schema:
                type: boolean
                example: true

  /totals:
    get:
      tags:
        - calculate
      summary: Get cart totals
      description: Retrieves the cart totals including subtotal, taxes, shipping, and discounts.
      parameters:
        - name: html
          in: query
          description: Returns the totals pre-formatted.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: Cart totals retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotalsResponse"
        "400":
          description: Bad request - invalid parameters.

  /coupon:
    get:
      tags:
        - coupons
      summary: Get applied coupons
      description: Gets the coupons applied to the cart.
      responses:
        "200":
          description: List of applied coupons.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponArrayResponse"
        "404":
          description: Coupons are not enabled for this store.
    post:
      tags:
        - coupons
      summary: Apply coupon to cart
      description: Applies a coupon to the cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: Coupon code to apply.
              required:
                - coupon
      responses:
        "200":
          description: Coupon applied successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponAppliedResponse"
        "400":
          description: Coupon failed to apply.
        "404":
          description: No coupon code provided.
    delete:
      tags:
        - coupons
      summary: Remove coupon from cart
      description: Removes a coupon from the cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: Coupon code to remove.
              required:
                - coupon
      responses:
        "200":
          description: Coupon removed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponRemovedResponse"
        "404":
          description: Coupon does not exist in the cart.

  /check-coupons:
    get:
      tags:
        - coupons
      summary: Check all applied coupons
      description: Checks all applied coupons to see if they are still valid.
      responses:
        "200":
          description: All coupons are valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckCouponsResponse"
        "404":
          description: No coupons have been applied.
        "400":
          description: Some coupons are invalid.

  /fees:
    get:
      tags:
        - fees
      summary: Get all cart fees
      description: Gets all fees applied to the cart.
      responses:
        "200":
          description: List of cart fees.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeeArrayResponse"
    post:
      tags:
        - fees
      summary: Add fee to cart
      description: Adds a fee to the cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the fee.
                amount:
                  type: string
                  description: Amount for the fee.
                taxable:
                  type: boolean
                  description: Determines if the fee is taxable.
                  default: false
                tax_class:
                  type: string
                  description: The tax class the fee applies to.
              required:
                - name
                - amount
      responses:
        "200":
          description: Fee added successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"
        "404":
          description: The name or amount of the fee is missing, or cart is empty.
        "403":
          description: Fee already exists.
    delete:
      tags:
        - fees
      summary: Remove all cart fees
      description: Removes all fees from the cart.
      responses:
        "200":
          description: All cart fees have been removed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"
        "400":
          description: Cart fees failed to remove.

  /shipping-methods:
    get:
      tags:
        - shipping
      summary: Get available shipping methods
      description: Gets available shipping methods for the cart.
      parameters:
        - name: recurring_cart_key
          in: query
          description: Recurring cart key for subscription shipping methods.
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of available shipping methods.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingMethod"
        "404":
          description: No shipping methods available or not needed.
    post:
      tags:
        - shipping
      summary: Set shipping method
      description: Sets a shipping method for the cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: Shipping method key.
                recurring_cart_key:
                  type: string
                  description: Recurring cart key for subscription shipping methods.
              required:
                - key
      responses:
        "200":
          description: Shipping method set successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooleanResponse"
        "404":
          description: Shipping method is incorrect or does not exist.

  /weight:
    get:
      tags:
        - cart
      summary: Get cart weight
      description: Gets the total weight of items in the cart.
      responses:
        "200":
          description: Cart weight retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /removed-items:
    get:
      tags:
        - items
      summary: Get removed cart items
      description: Gets the removed items from the cart.
      responses:
        "200":
          description: List of removed cart items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemovedItemsObjectResponse"

  /quantities:
    get:
      tags:
        - items
      summary: Get cart item quantities
      description: Gets the quantities of all items in the cart.
      responses:
        "200":
          description: Cart item quantities retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuantitiesObjectResponse"

  /payment-methods:
    get:
      tags:
        - payment
      summary: Get available payment methods
      description: Gets available payment methods for the cart.
      responses:
        "200":
          description: List of available payment methods.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethodsObjectResponse"
    post:
      tags:
        - payment
      summary: Set payment method
      description: Sets a payment method for the cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway_id:
                  type: string
                  description: Payment gateway ID.
              required:
                - gateway_id
      responses:
        "200":
          description: Payment method set successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooleanResponse"
        "404":
          description: Payment method is incorrect or does not exist.

  /customer:
    get:
      tags:
        - cart
      summary: Get cart owner details
      description: Gets the details of the cart owner (customer).
      responses:
        "200":
          description: Cart owner details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"

  /cross-sells:
    get:
      tags:
        - products
      summary: Get cross-sell products
      description: Gets cross-sell products for the cart.
      parameters:
        - name: thumb
          in: query
          description: Returns the URL of the product image thumbnail.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: List of cross-sell products.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrossSellsObjectResponse"

  /calculate/fees:
    post:
      tags:
        - calculate
      summary: Calculate cart fees
      description: Calculates the cart fees.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                set_session:
                  type: boolean
                  description: Sets the cart fees in session once calculated.
                  default: false
                return:
                  type: boolean
                  description: Returns the cart fees once calculated.
                  default: false
      responses:
        "200":
          description: Cart fees calculated successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/StringResponse"
                  - $ref: "#/components/schemas/FeeArrayResponse"
        "400":
          description: Bad request - invalid parameters.

  /calculate/shipping:
    post:
      tags:
        - calculate
      summary: Calculate shipping
      description: Calculates shipping for the cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                country:
                  type: string
                  description: Country is required to calculate shipping.
                state:
                  type: string
                  description: State is optional.
                city:
                  type: string
                  description: City is optional.
                postcode:
                  type: string
                  description: Postcode/ZIP is optional.
                return_methods:
                  type: boolean
                  description: Return shipping methods after calculation.
                  default: false
              required:
                - country
      responses:
        "200":
          description: Shipping calculated successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/StringResponse"
                  - $ref: "#/components/schemas/ShippingMethod"
        "404":
          description: Invalid postcode or missing country.

  /totals/discount:
    get:
      tags:
        - calculate
      summary: Get discount total
      description: Gets the total discount applied to the cart.
      responses:
        "200":
          description: Discount total retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/discount/coupon-totals:
    get:
      tags:
        - calculate
      summary: Get coupon discount totals
      description: Gets the discount totals per coupon.
      responses:
        "200":
          description: Coupon discount totals retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicStringObjectResponse"

  /totals/discount/coupon-tax:
    get:
      tags:
        - calculate
      summary: Get coupon discount tax totals
      description: Gets the discount tax totals per coupon.
      responses:
        "200":
          description: Coupon discount tax totals retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/fee:
    get:
      tags:
        - calculate
      summary: Get fee total
      description: Gets the total fees applied to the cart.
      responses:
        "200":
          description: Fee total retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/fee/tax:
    get:
      tags:
        - calculate
      summary: Get fee tax
      description: Gets the total fee tax applied to the cart.
      responses:
        "200":
          description: Fee tax retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/shipping:
    get:
      tags:
        - calculate
      summary: Get shipping total
      description: Gets the total shipping cost for the cart.
      parameters:
        - name: calculate
          in: query
          description: Calculate shipping before returning total.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: Shipping total retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/shipping/tax:
    get:
      tags:
        - calculate
      summary: Get shipping tax
      description: Gets the total shipping tax for the cart.
      parameters:
        - name: calculate
          in: query
          description: Calculate shipping before returning tax.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "200":
          description: Shipping tax retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/subtotal:
    get:
      tags:
        - calculate
      summary: Get subtotal
      description: Gets the subtotal of the cart.
      responses:
        "200":
          description: Subtotal retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/subtotal/tax:
    get:
      tags:
        - calculate
      summary: Get subtotal tax
      description: Gets the subtotal tax of the cart.
      responses:
        "200":
          description: Subtotal tax retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/tax:
    get:
      tags:
        - calculate
      summary: Get total tax
      description: Gets the total tax for the cart.
      responses:
        "200":
          description: Total tax retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

  /totals/total:
    get:
      tags:
        - calculate
      summary: Get cart total
      description: Gets the total amount for the cart.
      responses:
        "200":
          description: Cart total retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication with username and password (optional)
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Cart:
      type: object
      description: "A map of cart item keys to cart item objects. Each property key is a unique cart item key."
      additionalProperties:
        $ref: "#/components/schemas/CartItem"

    AddItemResponse:
      $ref: "#/components/schemas/CartItem"

    CalculateResponse:
      type: object
      properties:
        subtotal:
          description: Cart subtotal (before taxes and shipping).
          type: string
        subtotal_tax:
          description: Cart subtotal tax amount.
          type: number
        shipping_total:
          description: Total shipping cost.
          type: string
        shipping_tax:
          description: Shipping tax amount.
          type: number
        shipping_taxes:
          description: Array of shipping taxes.
          type: array
          items:
            type: object
        discount_total:
          description: Total discount amount applied.
          type: number
        discount_tax:
          description: Discount tax amount.
          type: number
        cart_contents_total:
          description: Total cart contents value.
          type: string
        cart_contents_tax:
          description: Cart contents tax amount.
          type: number
        cart_contents_taxes:
          description: Array of cart contents taxes.
          type: array
          items:
            type: object
        fee_total:
          description: Total fees applied.
          type: string
        fee_tax:
          description: Fee tax amount.
          type: number
        fee_taxes:
          description: Array of fee taxes.
          type: array
          items:
            type: object
        total:
          description: Cart total amount.
          type: string
        total_tax:
          description: Total tax amount.
          type: number

    ClearResponse:
      type: object
      properties:
        message:
          description: Message indicating the result of clearing the cart.
          type: string

    TotalsResponse:
      type: object
      properties:
        subtotal:
          description: Subtotal of all items in the cart. Returns formatted price if html=true.
          type: string
        subtotal_tax:
          description: Subtotal tax amount. Returns formatted price if html=true.
          oneOf:
            - type: number
            - type: string
        shipping_total:
          description: Shipping total cost. Returns formatted price if html=true.
          type: string
        shipping_tax:
          description: Shipping tax amount. Returns formatted price if html=true.
          oneOf:
            - type: number
            - type: string
        shipping_taxes:
          description: Array of shipping tax rates.
          type: array
          items:
            type: number
        discount_total:
          description: Total discount amount. Returns formatted price if html=true.
          oneOf:
            - type: number
            - type: string
        discount_tax:
          description: Discount tax amount. Returns formatted price if html=true.
          oneOf:
            - type: number
            - type: string
        cart_contents_total:
          description: Cart contents total. Returns formatted price if html=true.
          type: string
        cart_contents_tax:
          description: Cart contents tax. Returns formatted price if html=true.
          oneOf:
            - type: number
            - type: string
        cart_contents_taxes:
          description: Array of cart content tax rates.
          type: array
          items:
            type: number
        fee_total:
          description: Fee total amount. Returns formatted price if html=true.
          type: string
        fee_tax:
          description: Fee tax amount. Returns formatted price if html=true.
          oneOf:
            - type: number
            - type: string
        fee_taxes:
          description: Array of fee tax rates.
          type: array
          items:
            type: number
        total:
          description: Total amount of the cart including tax. Returns formatted price if html=true.
          type: string
        total_tax:
          description: Total tax amount. Returns formatted price if html=true.
          oneOf:
            - type: number
            - type: string

    CartItem:
      type: object
      properties:
        key:
          type: string
          description: Unique identifier for the item within the cart.
        product_id:
          type: integer
          description: Unique identifier for the product.
        variation_id:
          type: integer
          description: Unique identifier for the variation.
        variation:
          description: Chosen attributes (for variations).
          oneOf:
            - type: object
              additionalProperties:
                type: string
            - type: array
              items:
                type: string
        quantity:
          type: integer
          description: Quantity of this item in the cart.
        data_hash:
          type: string
          description: Hash of cart item data.
        line_tax_data:
          type: object
          description: Line tax data.
          properties:
            subtotal:
              description: Line subtotal tax data.
              type: array
              items:
                type: number
            total:
              description: Line total tax data.
              type: array
              items:
                type: number
        line_subtotal:
          type: number
          description: Line subtotal (the price of the product before coupon discounts have been applied).
        line_subtotal_tax:
          type: number
          description: Line subtotal tax.
        line_total:
          type: number
          description: Line total (the price of the product after coupon discounts have been applied).
        line_tax:
          type: number
          description: Line total tax.
        product_name:
          type: string
          description: Product name.
        product_title:
          type: string
          description: Product title.
        product_price:
          type: string
          description: Current product price.
        product_image:
          type: string
          description: Product image URL. (Returns if thumb is true)
      additionalProperties: false

    CountItemsResponse:
      oneOf:
        - type: string
          description: Numeric count as string when cart has items
          example: "5"
        - type: string
          description: Message when cart is empty
          example: "There are no items in the cart!"

    AppliedCouponsResponse:
      type: array
      items:
        type: string

    CouponAppliedResponse:
      type: object
      properties:
        message:
          type: string
        coupon:
          type: string
        response:
          type: boolean

    CouponRemovedResponse:
      type: object
      properties:
        message:
          type: string
        coupon:
          type: string
        response:
          type: boolean

    CheckCouponsResponse:
      type: object
      properties:
        message:
          type: string
        response:
          type: boolean

    CartFeesResponse:
      type: array
      items:
        $ref: "#/components/schemas/CartFee"

    CartFee:
      type: object
      properties:
        name:
          type: string
        amount:
          type: number
        taxable:
          type: boolean
        tax_class:
          type: string
        total:
          type: number
        tax:
          type: number

    FeeAddedResponse:
      type: object
      properties:
        message:
          type: string

    FeesRemovedResponse:
      type: object
      properties:
        message:
          type: string

    ShippingMethod:
      type: object
      properties:
        key:
          type: string
        method_id:
          type: string
        instance_id:
          type: integer
        label:
          type: string
        cost:
          type: number
        html:
          type: string
        taxes:
          type: object
        chosen_method:
          type: boolean

    CartWeightResponse:
      type: object
      properties:
        weight:
          type: string

    RemovedItemsResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/RemovedItem"

    RemovedItem:
      type: object
      properties:
        key:
          type: string
        product_id:
          type: integer
        quantity:
          type: integer
        name:
          type: string

    CartQuantitiesResponse:
      type: object
      additionalProperties:
        type: integer

    PaymentMethodsResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/PaymentMethod"

    PaymentMethod:
      type: object
      properties:
        id:
          type: string
        method_title:
          type: string
        title:
          type: string
        description:
          type: string
        icon:
          type: string
        icon_urls:
          type: array
          items:
            type: string
        has_fields:
          type: boolean
        countries:
          type: array
          items:
            type: string
        availability:
          type: string
        supports:
          type: array
          items:
            type: string
        order_button_text:
          type: string
        chosen_gateway:
          type: boolean

    PaymentMethodSetResponse:
      type: object
      properties:
        success:
          type: boolean

    CustomerResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            ID:
              type: integer
            first_name:
              type: string
            last_name:
              type: string
        billing:
          type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
            company:
              type: string
            email:
              type: string
            phone:
              type: string
            country:
              type: string
            state:
              type: string
            postcode:
              type: string
            city:
              type: string
            address:
              type: string
            address_1:
              type: string
            address_2:
              type: string
        shipping:
          type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
            company:
              type: string
            country:
              type: string
            state:
              type: string
            postcode:
              type: string
            city:
              type: string
            address:
              type: string
            address_1:
              type: string
            address_2:
              type: string
        has_calculated_shipping:
          type: boolean
        is_vat_exempt:
          type: string

    CrossSellsResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/CrossSellItem"

    CrossSellItem:
      type: object
      properties:
        id:
          type: integer
        product_name:
          type: string
        product_title:
          type: string
        price:
          type: string
        regular_price:
          type: string
        sale_price:
          type: string
        product_image:
          type: string

    CalculateFeesResponse:
      oneOf:
        - $ref: "#/components/schemas/StringResponse"
        - $ref: "#/components/schemas/FeeArrayResponse"

    CalculateShippingResponse:
      oneOf:
        - $ref: "#/components/schemas/StringResponse"
        - $ref: "#/components/schemas/ShippingMethod"

    DiscountTotalResponse:
      type: object
      properties:
        value:
          type: string

    CouponDiscountTotalsResponse:
      type: object
      additionalProperties:
        type: string

    CouponDiscountTaxResponse:
      type: object
      properties:
        value:
          type: string

    FeeTotalResponse:
      type: object
      properties:
        value:
          type: string

    FeeTaxResponse:
      type: object
      properties:
        value:
          type: string

    ShippingTotalResponse:
      type: object
      properties:
        value:
          type: string

    ShippingTaxResponse:
      type: object
      properties:
        value:
          type: string

    SubtotalResponse:
      type: object
      properties:
        value:
          type: string

    SubtotalTaxResponse:
      type: object
      properties:
        value:
          type: string

    TotalTaxResponse:
      type: object
      properties:
        value:
          type: string

    CartTotalResponse:
      type: object
      properties:
        value:
          type: string

    StringResponse:
      type: string
    BooleanResponse:
      type: boolean
    CouponArrayResponse:
      type: array
      items:
        type: string
    FeeArrayResponse:
      type: array
      items:
        $ref: "#/components/schemas/CartFee"
    RemovedItemsObjectResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/RemovedItem"
    QuantitiesObjectResponse:
      type: object
      additionalProperties:
        type: integer
    PaymentMethodsObjectResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/PaymentMethod"
    CrossSellsObjectResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/CrossSellItem"
    DynamicStringObjectResponse:
      type: object
      additionalProperties:
        type: string
